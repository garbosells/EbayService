using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using eBay;
using eBay.ApiClient.Auth.OAuth2;
using eBay.ApiClient.Auth.OAuth2.Model;
using Microsoft.ApplicationInsights;
using Microsoft.Extensions.Options;

namespace EbayService.Controllers
{
    [ApiController]
    public class AuthorizationController : ControllerBase
    {
        TelemetryClient telemetryClient = new TelemetryClient();
        private readonly IOptions<AppSettings> settings;

        /// <summary>
        /// Gets an Authorization URL to send to the user.
        /// The callback is set in the eBay key manager. It is associated with the redirecturi listed in ebay-config.yaml
        /// </summary>
        /// <param></param>
        /// <returns></returns>
        [HttpGet]
        [Route("api/Authorization/GenerateUserAuthorizationUrl")]
        public async Task<string> GenerateUserAuthorizationUrlAsync()
        {
            OAuth2Api oAuth = new OAuth2Api();
            string url = oAuth.GenerateUserAuthorizationUrl(Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") != "Production" ? OAuthEnvironment.SANDBOX : OAuthEnvironment.PRODUCTION, new string[] { "https://api.ebay.com/oauth/api_scope/sell.inventory" }, "test");
            return await Task.FromResult<string>(url);
        }

        /// <summary>
        /// Endpoint called by eBay to return a code that can be exchanged for a user auth token.
        /// </summary>
        /// <param name="code">The code generated by eBay</param>
        /// <param name="key">A GUID string that must be included in eBay's call</param>
        /// <returns></returns>
        [HttpGet]
        [Route("api/Authorization/GetAuthTokenFromCode")]
        public Task<OAuthResponse> GetAuthTokenFromCode(string code, string key)
        {
            OAuth2Api oAuth = new OAuth2Api();
            var response = oAuth.ExchangeCodeForAccessToken(Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") != "Production" ? OAuthEnvironment.SANDBOX : OAuthEnvironment.PRODUCTION, code);
            return Task.FromResult<OAuthResponse>(response);
        }
    }
}
